@page "/transactions"
@attribute [Authorize(Roles = "User,Admin")]
<div class="container mt-4">
    <div class="row">
        <div class="col-md-12">
            <div class="card shadow-sm border-primary">
                <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Transactions</h5>
                    <div class="dropdown">
                        <button class="btn btn-light btn-sm dropdown-toggle" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
                            <i class="bi bi-plus"></i> Add Transaction
                        </button>
                        <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                            <li><a class="dropdown-item" href="/transactions/deposit">
                                <i class="bi bi-cash-stack"></i> Deposit
                            </a></li>
                            <li><a class="dropdown-item" href="/transactions/withdraw">
                                <i class="bi bi-arrow-down-circle"></i> Withdraw
                            </a></li>
                            <li><a class="dropdown-item" href="/transactions/transfer">
                                <i class="bi bi-arrow-right-circle"></i> Transfer
                            </a></li>
                        </ul>
                    </div>
                </div>

                @if (isLoading)
                {
                    <div class="card-body text-center">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                }
                else if (transactions != null && transactions.Any())
                {
                    <div class="card-body">
                        <div class="mb-3">
                            <input type="text" class="form-control" placeholder="Search transactions..."
                                   @bind="searchTerm" @oninput="OnSearchTermChanged"/>
                        </div>
                        <table class="table table-striped table-hover">
                            <thead class="thead-dark">
                                <tr>
                                    <th>Transaction ID</th>
                                    <th>Bank Account Number</th>
                                    <th>Transaction Type</th>
                                    <th>Amount</th>
                                    <th>Date</th>
                                    <th>Receiver Account Number</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (filteredTransactions.Any())
                                {
                                    @foreach (var transaction in filteredTransactions)
                                    {
                                        <tr>
                                            <td>@transaction.Id</td>
                                            <td>@transaction.BankAccountNumber</td>
                                            <td>@transaction.TransactionType</td>
                                            <td class="text-success font-weight-bold">@transaction.Amount.ToString("C")</td>
                                            <td>@transaction.TransactionDate.ToString("d")</td>
                                            
                                            @if (transaction.TransactionType.Equals("Transfer", StringComparison.OrdinalIgnoreCase))
                                            {
                                                <td class="text-center padded-cell">@(string.IsNullOrEmpty(transaction.ReceiverAccountNumber) ? "-" : transaction.ReceiverAccountNumber)</td>
                                            }
                                            else
                                            {
                                                <td class="text-center padded-cell">-</td>
                                            }
                                            
                                            <td>
                                                <div class="btn-group btn-group-sm" role="group">
                                                    <button class="btn btn-outline-secondary btn-sm" @onclick="() => ShowTransactionDetails(transaction)">
                                                        <i class="bi bi-eye"></i>
                                                    </button>
                                                    <button class="btn btn-outline-danger btn-sm" @onclick="() => ShowDeleteConfirmation(transaction.Id)">
                                                        <i class="bi bi-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="7" class="text-center">No matching records found.</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    <div class="card-footer text-muted">
                        Showing @filteredTransactions.Count() transactions
                    </div>
                }
                else
                {
                    <div class="alert alert-info" role="alert">
                        <i class="bi bi-info-circle"></i> No transactions available.
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@if (showTransactionDetailsModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog" aria-labelledby="transactionDetailsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title" id="transactionDetailsModalLabel">Transaction Details</h5>
                    <button type="button" class="btn-close" @onclick="CloseTransactionDetailsModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    @if (selectedTransaction != null)
                    {
                        <dl class="row">
                            <dt class="col-sm-4">Transaction ID</dt>
                            <dd class="col-sm-8">@selectedTransaction.Id</dd>
                            <dt class="col-sm-4">Bank Account Number</dt>
                            <dd class="col-sm-8">@selectedTransaction.BankAccountNumber</dd>
                            <dt class="col-sm-4">Transaction Type</dt>
                            <dd class="col-sm-8">@selectedTransaction.TransactionType</dd>
                            <dt class="col-sm-4">Amount</dt>
                            <dd class="col-sm-8 text-success">@selectedTransaction.Amount.ToString("C")</dd>
                            <dt class="col-sm-4">Date</dt>
                            <dd class="col-sm-8">@selectedTransaction.TransactionDate.ToString("d")</dd>
                            <dt class="col-sm-4">Description</dt>
                            <dd class="col-sm-8">@selectedTransaction.Description</dd>
                            @if (selectedTransaction.TransactionType.Equals("Transfer", StringComparison.OrdinalIgnoreCase))
                            {
                                <dt class="col-sm-4">Receiver Account Number</dt>
                                <dd class="col-sm-8">@selectedTransaction.ReceiverAccountNumber</dd>
                            }
                        </dl>
                    }
                    else
                    {
                        <p>No transaction details available.</p>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseTransactionDetailsModal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@if (showDeleteConfirmationModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog" aria-labelledby="deleteConfirmationModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title" id="deleteConfirmationModalLabel">Confirm Deletion</h5>
                    <button type="button" class="btn-close" @onclick="CloseDeleteConfirmationModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this transaction with ID <strong>@transactionIdToDelete</strong>?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDeleteConfirmationModal">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDeleteTransaction">Delete</button>
                </div>
            </div>
        </div>
    </div>
}
<Footer />

@code {
    private IEnumerable<Transaction>? transactions;
    private IEnumerable<Transaction> filteredTransactions = Enumerable.Empty<Transaction>(); 
    private bool isLoading = true;
    private string searchTerm = string.Empty;
    private bool showTransactionDetailsModal = false;
    private Transaction? selectedTransaction;
    private bool showDeleteConfirmationModal = false;
    private int transactionIdToDelete;

    protected override async Task OnInitializedAsync()
    {
        await Reload();
    }

    public async Task Reload()
    {
        try
        {
            transactions = await _transactionService.GetTransactionsAsync();
            filteredTransactions = transactions ?? Enumerable.Empty<Transaction>();
            Console.WriteLine($"Transactions fetched: {filteredTransactions.Count()}"); // Debugging
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error fetching transactions: {ex.Message}");
        }
        finally
        {
            isLoading = false; 
        }   
    }

    private void ShowTransactionDetails(Transaction transaction)
    {
        selectedTransaction = transaction;
        showTransactionDetailsModal = true;
    }

    private void CloseTransactionDetailsModal()
    {
        showTransactionDetailsModal = false;
    }

    private void ShowDeleteConfirmation(int transactionId)
    {
        transactionIdToDelete = transactionId;
        showDeleteConfirmationModal = true;
    }

    private void CloseDeleteConfirmationModal()
    {
        showDeleteConfirmationModal = false;
        transactionIdToDelete = 0; // Reset transaction ID
    }

    private async Task ConfirmDeleteTransaction()
    {
        try
        {
            await _transactionService.DeleteTransactionAsync(transactionIdToDelete);

            FilterTransactions();
            await Reload();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error deleting transaction: {ex.Message}");
        }
        finally
        {
            CloseDeleteConfirmationModal();
        }
    }

    private void OnSearchTermChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        FilterTransactions();
    }

    private void FilterTransactions()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredTransactions = transactions ?? Enumerable.Empty<Transaction>();
        }
        else
        {
            filteredTransactions = (transactions ?? Enumerable.Empty<Transaction>())
                .Where(transaction =>
                    transaction.BankAccountNumber.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    transaction.TransactionType.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
        }
    }
}
